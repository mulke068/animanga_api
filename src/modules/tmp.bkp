
#[allow(dead_code)]
impl AnimeSearch {
    pub async fn latest_id(&self, index: Index, increase: usize) -> usize {
        match index.get_stats().await {
            Ok(stats) => stats.number_of_documents + increase,
            Err(_) => 0,
        }
    }

    #[allow(unused_assignments)]
    pub async fn create(&self, index: Index) -> TaskInfo {
        index
            .add_documents(
                &[AnimeNamesCreate {
                    id: self.latest_id(index.clone(), 1).await,
                    aid: splitted_data_at(self.aid.clone(), ":"),
                    base: AnimeNames {
                        original: self.original.clone(),
                        en: self.en.clone(),
                        jp: self.jp.clone(),
                    },
                }],
                Some("id"),
            )
            .await
            .unwrap()
    }

    pub async fn update(&self, mut index: Index) -> TaskInfo {
        index.primary_key = Some(self.aid.to_string());
        index.update().await.unwrap()
    }

    pub async fn delete(&self, id: usize, index: Index) -> TaskInfo {
        index.delete_document(&id).await.unwrap()
    }
}
